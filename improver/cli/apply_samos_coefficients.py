#!/usr/bin/env python
# (C) Crown Copyright, Met Office. All rights reserved.
#
# This file is part of 'IMPROVER' and is released under the BSD 3-Clause license.
# See LICENSE in the root of the repository for full licensing details.
"""Script to apply Standardised Anomaly Model Output
Statistics (SAMOS) calibration."""

from improver import cli


@cli.clizefy
@cli.with_output
def process(
    *cubes: cli.inputcubelist,
    gams: cli.inputpickle,
    gam_features: cli.comma_separated_list,
    validity_times: cli.comma_separated_list = None,
    realizations_count: int = None,
    randomise=False,
    random_seed: int = None,
    ignore_ecc_bounds_exceedance=False,
    tolerate_time_mismatch=False,
    predictor="mean",
    percentiles: cli.comma_separated_list = None,
):
    """Apply coefficients for Standardized Anomaly Model Output Statistics
    (SAMOS).

    The forecast is converted to anomaly data, the forecast mean and standard deviation are
    predicted from the provided GAM models. The anomaly data is calibrated using the
    EMOS plugin and the provided forecast coefficients.
    The calibrated forecast is then regenerated from the distributional information
    and the data is written to a cube. If no coefficients are provided the input
    forecast is returned unchanged.

    Args:
        cubes (iris.cube.CubeList):
            A list of cubes containing:
            - A Cube containing the forecast to be calibrated. The input format
            could be either realizations, probabilities or percentiles.
            - A cubelist containing the coefficients to be used for calibration or None.
            If none then the input, or probability template if provided,
            is returned unchanged.
            - Optionally, additional cubes that will be provided to the emos plugin
            representing static additional predictors. These static additional
            predictors are expected not to have a time coordinate.
            - Optionally additional cubes that will be provided to the GAM to help
            calculate the climatalogical statistics. The name of the cubes should
            match one of the names in the gam_features list.
            - Optionally, a cube containing the land-sea mask. This is used to
            ensure that only land points are calibrated. If no land-sea mask is
            provided, all points will be calibrated.
            - Optionally, a cube containing a probability forecast that will be
            used as a template when generating probability output when the input
            format of the forecast cube is not probabilities i.e. realizations
            or percentiles. If no coefficients are provided and a probability
            template is provided, the probability template forecast will be
            returned as the uncalibrated probability forecast.
        gams (list of GAM models):
            A list containing two lists of two fitted GAMs. The first list
            contains two fitted GAMs, one for predicting the climatological mean
            of the historical forecasts and the second predicting the
            climatological standard deviation. The second list contains two
            fitted GAMs, one for predicting the climatological mean of the truths
            and the second predicting the climatological standard deviation. The
            second list is not used in this CLI but is generated by the
            estimate-samos-gams CLI.
        gam_features (list of str):
            A list of the names of the cubes that will be used as additional
            features in the GAM. Additionaly the name of any coordinates
            that are to be used as features in the GAM.
        validity_times (List[str]):
            Times at which the forecast must be valid. This must be provided
            as a four digit string (HHMM) where the first two digits represent the hour
            and the last two digits represent the minutes e.g. 0300 or 0315. If the
            forecast provided is at a different validity time then no coefficients
            will be applied.
        realizations_count (int):
            Option to specify the number of ensemble realizations that will be
            created from probabilities or percentiles when applying the SAMOS
            coefficients.
        randomise (bool):
            Option to reorder the post-processed forecasts randomly. If not
            set, the ordering of the raw ensemble is used. This option is
            only valid when the input format is realizations.
        random_seed (int):
            Option to specify a value for the random seed for testing
            purposes, otherwise the default random seen behaviour is utilised.
            The random seed is used in the generation of the random numbers
            used for either the randomise option to order the input
            percentiles randomly, rather than use the ordering from the raw
            ensemble, or for splitting tied values within the raw ensemble,
            so that the values from the input percentiles can be ordered to
            match the raw ensemble.
        ignore_ecc_bounds_exceedance (bool):
            If True, where the percentiles exceed the ECC bounds range,
            raises a warning rather than an exception. This occurs when the
            current forecasts is in the form of probabilities and is
            converted to percentiles, as part of converting the input
            probabilities into realizations.
        tolerate_time_mismatch (bool):
            If True, tolerate a mismatch in validity time and forecast period
            for coefficients vs forecasts. Use with caution!
        predictor (str):
            String to specify the form of the predictor used to calculate
            the location parameter when estimating the EMOS coefficients.
            Currently the ensemble mean ("mean") and the ensemble
            realizations ("realizations") are supported as the predictors.
        percentiles (List[float]):
            The set of percentiles used to create the calibrated forecast.
    Returns:
        iris.cube.Cube:
            The calibrated forecast cube.

    """
    # monkey-patch to 'tweak' scipy to prevent errors occuring
    import scipy.sparse

    from improver.calibration import split_cubes_for_samos
    from improver.calibration.samos_calibration import ApplySAMOS
    from improver.ensemble_copula_coupling.utilities import prepare_cube_no_calibration

    def to_array(self):
        return self.toarray()

    scipy.sparse.spmatrix.A = property(to_array)

    (
        forecast,
        _,
        gam_additional_fields,
        emos_coefficients,
        emos_additional_fields,
        prob_template,
    ) = split_cubes_for_samos(
        cubes=cubes,
        gam_features=gam_features,
        truth_attribute=None,
        expect_emos_coeffs=True,
        expect_emos_fields=True,
    )

    uncalibrated_forecast = prepare_cube_no_calibration(
        forecast,
        emos_coefficients,
        ignore_ecc_bounds_exceedance=ignore_ecc_bounds_exceedance,
        validity_times=validity_times,
        percentiles=percentiles,
        prob_template=prob_template,
    )

    if uncalibrated_forecast is not None:
        return uncalibrated_forecast
    plugin = ApplySAMOS(percentiles=percentiles)
    result = plugin.process(
        forecast=forecast,
        forecast_gams=gams[0],
        gam_features=gam_features,
        emos_coefficients=emos_coefficients,
        gam_additional_fields=gam_additional_fields,
        emos_additional_fields=emos_additional_fields,
        prob_template=prob_template,
        realizations_count=realizations_count,
        ignore_ecc_bounds=ignore_ecc_bounds_exceedance,
        tolerate_time_mismatch=tolerate_time_mismatch,
        predictor=predictor,
        randomise=randomise,
        random_seed=random_seed,
    )

    return result
